(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory(require("react"));
  else if (typeof define === 'function' && define.amd)
    define(["react"], factory);
  else {
    var a = typeof exports === 'object' ? factory(require("react")) : factory(root["React"]);
    for (var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
  }
})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE__113__) {
  return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 184:
/***/ ((__unused_webpack_module, exports) => {

          "use strict";
          
          Object.defineProperty(exports, "__esModule", ({
            value: true
          }));
          exports.logger = exports.logMap = exports.logType = void 0;
          var logType = {
            inf: "info",
            bra: "brand",
            err: "error",
            war: "warning"
          };
          exports.logType = logType;
          var consoleColorCode = {
            error: {
              brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #f44336;"
            },
            warning: {
              brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #f48e36;"
            },
            information: {
              brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #38b9f4;"
            },
            branding: {
              brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #677b8c;"
            }
          };
          var logMap = {
            // Node Not Found
            NNF: function NNF(a) {
              return "%cRootz Error: Node ".concat(a, " should have a defined Component");
            },
            // Invalid Number Of Arguments
            INOA: function INOA(a) {
              return "%cRootz Error: Node constructor ".concat(a, " requires exactly 2 argument 'id' of type string and 'Component' of type React Component");
            },
            // Duplicate Entry Node Id
            DENI: function DENI(a) {
              return "%cRootz Error: In '".concat(a, "', Duplicate entry found, Node Name already exists");
            },
            // Invalid type State Required Object Or Fucntion
            ITSROOF: function ITSROOF(a, b) {
              return "%cRootz Error: In '".concat(a, "', Invalid type arguments in useActionFor for '").concat(b, "', required Object or a Function");
            },
            // Invalid type Action Name Required String
            ITANRS: function ITANRS(a, b) {
              return "%cRootz Error: In '".concat(a, "', Invalid type arguments for '").concat(b, "', required String");
            },
            // Invalid type Node ID
            ITNI: function ITNI(a, b) {
              return "%cRootz Error: In ".concat(a, ", Node name passed for '").concat(b, "' does not exist, please check if it is defined");
            },
            // Invalid type Callback Required Function 
            ITCRF: function ITCRF(a, b) {
              return "%cRootz Error: In '".concat(a, "', Invalid type arguments '").concat(b, "', required function.");
            },
            // Invalid type State Required Object
            ITSRO: function ITSRO(a, b) {
              return "%cRootz Error: In '".concat(a, "', Invalid type arguments in '").concat(b, "', required Object. States are of type Object only.");
            }
          };
          exports.logMap = logMap;

          var logger = function logger(a, b) {
            switch (a) {
              case logType.err:
                {
                  console.log(b, consoleColorCode.error.brand);
                  break;
                }

              case logType.war:
                {
                  console.log(b, consoleColorCode.warning.brand);
                  break;
                }

              case logType.inf:
                {
                  console.log(b, consoleColorCode.information.brand);
                  break;
                }

              case logType.bra:
                {
                  console.log(b, consoleColorCode.branding.brand);
                  break;
                }

              default:
                {
                  console.log(b, consoleColorCode.information.brand);
                }
            }
          };

          exports.logger = logger;

          /***/
}),

/***/ 403:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";
          /** @license RootzJs v2.0.23
           ** @author Trishanth Naidu
           ** @github https://github.com/rootzjs/core v2.0.23
           * react-jsx-dev-runtime.development.js
           * Copyright 2019 Trishanth Naidu
           * Copyright (c) Rootz Js,and its affiliates.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */


          function asyncGeneratorStep(a, b, c, d, e, f, g) { try { var h = a[f](g); var i = h.value; } catch (a) { c(a); return; } if (h.done) { b(i); } else { Promise.resolve(i).then(d, e); } }

          function _asyncToGenerator(a) { return function () { var b = this, c = arguments; return new Promise(function (d, e) { var h = a.apply(b, c); function f(a) { asyncGeneratorStep(h, d, e, f, g, "next", a); } function g(a) { asyncGeneratorStep(h, d, e, f, g, "throw", a); } f(undefined); }); }; }

          function ownKeys(a, b) { var c = Object.keys(a); if (Object.getOwnPropertySymbols) { var d = Object.getOwnPropertySymbols(a); if (b) d = d.filter(function (b) { return Object.getOwnPropertyDescriptor(a, b).enumerable; }); c.push.apply(c, d); } return c; }

          function _objectSpread(a) { for (var b = 1; b < arguments.length; b++) { var c = arguments[b] != null ? arguments[b] : {}; if (b % 2) { ownKeys(Object(c), true).forEach(function (b) { _defineProperty2(a, b, c[b]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(a, Object.getOwnPropertyDescriptors(c)); } else { ownKeys(Object(c)).forEach(function (b) { Object.defineProperty(a, b, Object.getOwnPropertyDescriptor(c, b)); }); } } return a; }

          function _defineProperty2(a, b, c) { if (b in a) { Object.defineProperty(a, b, { value: c, enumerable: true, configurable: true, writable: true }); } else { a[b] = c; } return a; }

          function _classCallCheck(a, b) { if (!(a instanceof b)) { throw new TypeError("Cannot call a class as a function"); } }

          function _defineProperties(a, b) { for (var c = 0; c < b.length; c++) { var d = b[c]; d.enumerable = d.enumerable || false; d.configurable = true; if ("value" in d) d.writable = true; Object.defineProperty(a, d.key, d); } }

          function _createClass(a, b, c) { if (b) _defineProperties(a.prototype, b); if (c) _defineProperties(a, c); return a; }

          function _inherits(a, b) { if (typeof b !== "function" && b !== null) { throw new TypeError("Super expression must either be null or a function"); } a.prototype = Object.create(b && b.prototype, { constructor: { value: a, writable: true, configurable: true } }); if (b) _setPrototypeOf(a, b); }

          function _setPrototypeOf(a, b) { _setPrototypeOf = Object.setPrototypeOf || function a(b, c) { b.__proto__ = c; return b; }; return _setPrototypeOf(a, b); }

          function _createSuper(a) { var b = _isNativeReflectConstruct(); return function c() { var d = _getPrototypeOf(a), e; if (b) { var f = _getPrototypeOf(this).constructor; e = Reflect.construct(d, arguments, f); } else { e = d.apply(this, arguments); } return _possibleConstructorReturn(this, e); }; }

          function _possibleConstructorReturn(a, b) { if (b && ((typeof b === "undefined" ? "undefined" : _typeof(b)) === "object" || typeof b === "function")) { return b; } return _assertThisInitialized(a); }

          function _assertThisInitialized(a) { if (a === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return a; }

          function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () { })); return true; } catch (a) { return false; } }

          function _getPrototypeOf(a) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function a(b) { return b.__proto__ || Object.getPrototypeOf(b); }; return _getPrototypeOf(a); }

          function _toConsumableArray(a) { return _arrayWithoutHoles(a) || _iterableToArray(a) || _unsupportedIterableToArray(a) || _nonIterableSpread(); }

          function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

          function _unsupportedIterableToArray(a, b) { if (!a) return; if (typeof a === "string") return _arrayLikeToArray(a, b); var c = Object.prototype.toString.call(a).slice(8, -1); if (c === "Object" && a.constructor) c = a.constructor.name; if (c === "Map" || c === "Set") return Array.from(a); if (c === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)) return _arrayLikeToArray(a, b); }

          function _iterableToArray(a) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(a)) return Array.from(a); }

          function _arrayWithoutHoles(a) { if (Array.isArray(a)) return _arrayLikeToArray(a); }

          function _arrayLikeToArray(a, b) { if (b == null || b > a.length) b = a.length; for (var c = 0, d = new Array(b); c < b; c++) { d[c] = a[c]; } return d; }

          function _typeof(a) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(a) { return typeof a; }; } else { _typeof = function _typeof(a) { return a && typeof Symbol === "function" && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a; }; } return _typeof(a); }

          Object.defineProperty(exports, "__esModule", ({
            value: true
          }));
          exports.getAllNodes = exports.getProfile = exports.setProfile = exports.createNode = void 0;

          var _react = _interopRequireDefault(__webpack_require__(113));

          function _interopRequireDefault(a) {
            return a && a.__esModule ? a : {
              "default": a
            };
          }

          function _defineProperty(a, b, c) {
            if (b in a) {
              Object.defineProperty(a, b, {
                value: c,
                enumerable: true,
                configurable: true,
                writable: true
              });
            } else {
              a[b] = c;
            }

            return a;
          }

          function _getRequireWildcardCache() {
            if (typeof WeakMap !== "function") return null;
            var a = new WeakMap();

            _getRequireWildcardCache = function _getRequireWildcardCache() {
              return a;
            };

            return a;
          }

          function _interopRequireWildcard(a) {
            if (a && a.__esModule) {
              return a;
            }

            if (a === null || _typeof(a) !== "object" && typeof a !== "function") {
              return {
                "default": a
              };
            }

            var b = _getRequireWildcardCache();

            if (b && b.has(a)) {
              return b.get(a);
            }

            var c = {};
            var d = Object.defineProperty && Object.getOwnPropertyDescriptor;

            for (var e in a) {
              if (Object.prototype.hasOwnProperty.call(a, e)) {
                var f = d ? Object.getOwnPropertyDescriptor(a, e) : null;

                if (f && (f.get || f.set)) {
                  Object.defineProperty(c, e, f);
                } else {
                  c[e] = a[e];
                }
              }
            }

            c["default"] = a;

            if (b) {
              b.set(a, c);
            }

            return c;
          } // performance measure empty object for test


          window.performance.measure = window.performance.measure || function () { };

          var bus = {};
          var logMap;
          var logger;
          var logType;
          var store = {};
          var isDev = "production" === "development";

          var now = function now(a) {
            return performance.measure(a);
          };

          var setImmutableObject = function setImmutableObject(a, b) {
            return Object.assign({}, a, b);
          };

          var setImmutableArray = function setImmutableArray(a, b) {
            return [].concat(_toConsumableArray(a), _toConsumableArray(b));
          };

          var requestUpdate = function requestUpdate(a) {
            var b = store[a]["scope"];
            var c = b["state"]["rootzStateHandlerVariable"] + 1;
            b.updater.enqueueSetState(b, {
              rootzStateHandlerVariable: c
            });
          };

          now("@@APP_INIT"); // Dynamic import of modules based on Env

          if (isDev) {
            Promise.resolve().then(function () {
              return _interopRequireWildcard(__webpack_require__(184));
            }).then(function (a) {
              logMap = a.logMap;
              logger = a.logger;
              logType = a.logType;
              logger(logType.bra, "%cUse Rootz DevTools for better debugging experience: https://devtools.rootzjs.org");
            });
            Promise.resolve().then(function () {
              return _interopRequireWildcard(__webpack_require__(697));
            }).then(function (a) {
              var b = a.PropTypes;
              /**
               * Type Definitions for Dev only
               */

              createNode.propTypes = {
                id: b.string.isRequired,
                Component: b.element.isRequired
              };
              NodeC.propTypes = {
                id: b.string.isRequired,
                Component: b.element.isRequired
              };
              NodeC.prototype.useContractCallback.propTypes = {
                forNode: b.string.isRequired,
                actionName: b.string.isRequired,
                func: b.func.isRequired
              };
              NodeC.prototype.useActionCallback.propTypes = {
                actionName: b.string.isRequired,
                func: b.func.isRequired
              };
              NodeC.prototype.useAction.propTypes = {
                actionName: b.string.isRequired,
                newState: b.oneOfType([b.object, b.func]).isRequired
              };
              NodeC.prototype.useContract.propTypes = {
                forNode: b.string.isRequired,
                actionName: b.string.isRequired,
                newState: b.oneOfType([b.object, b.func]).isRequired
              };
              NodeC.prototype.state.propTypes = {
                state: b.object.isRequired
              };
              dispatchNode.propTypes = b.shape({
                id: b.string.isRequired,
                actions: b.object.isRequired,
                contract: b.object.isRequired,
                Component: b.element.isRequired
              });
            });
          }
          /**
           * To view all the Nodes defined in the Application at any point of time
           *
           * ```js
           *      const allNodes = addProfile({ sessionId: "9694dca333f01433ecb179d32251c946" });
           * ```
           * @preserve
           * @param {typeObject} state
           * @returns {bus} void
           *
           */


          var setProfile = function setProfile(a) {
            bus = setImmutableObject(bus, a);
          };
          /**
           * To view all the Nodes defined in the Application at any point of time
           *
           * ```js
           *      const allNodes = getAllNodes();
           * ```
           *
           * @returns {{}} Rootz.appRoot
           *
           */


          exports.setProfile = setProfile;

          var getAllNodes = function getAllNodes() {
            return store;
          };
          /**
           * Profile is similar to the concept of Bus in Networks.
           * It helps you to store application specific generic data which could be accessible at any point within the application execution.
           *
           * ```js
           *      const sessionId = getProfile()["sessionId"];
           * ```
           *
           * @returns {any} Rootz.Bus
           *
           */


          exports.getAllNodes = getAllNodes;

          var getProfile = function getProfile() {
            return bus;
          }; // Insert Node

          /**
           * @typedef {({ id: String, actions: {}, contract: {}, Component: (React.Component | React.FC) })} dispatchNodeParamType
           */

          /**
           *
           * @param {dispatchNodeParamType}
           * @returns {React.PureComponent}
           */


          exports.getProfile = getProfile;

          var dispatchNode = function dispatchNode(a) {
            var b = a.id,
              c = a.actions,
              d = a.contract,
              e = a.Component;
            var f, g;
            var h = {};

            if (e === null) {
              logger(logType.err, logMap.NNF(b));
              throw new Error();
            }

            h[b] = (g = f = /*#__PURE__*/function (a) {
              _inherits(f, a);

              var g = _createSuper(f);

              function f(a) {
                var b;

                _classCallCheck(this, f);

                b = g.call(this, a);
                b.state = {
                  rootzStateHandlerVariable: 0
                }; // this helps make actions static variable to be used as dependency for useEffect, useCallback and useMemo 

                b.actions = _objectSpread(_objectSpread({}, c), d);
                return b;
              }

              _createClass(f, [{
                key: "componentDidMount",
                value: function componentDidMount() {
                  now(b);
                }
              }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate() {
                  now(b + "_update");
                }
              }, {
                key: "render",
                value: function render() {
                  var a = store[b]["state"];
                  store[b]["scope"] = setImmutableObject(store[b]["scope"], this); // fetches the latest state everytime the package is called

                  var c = getProfile();
                  return /*#__PURE__*/_react["default"].createElement(e, {
                    state: a,
                    profile: c,
                    props: this.props,
                    actions: this.actions
                  });
                }
              }]);

              return f;
            }(_react["default"].PureComponent), _defineProperty(f, "displayName", b), g);
            return h[b];
          };
          /**
           *
           * @param {string} id string
           * @param {(React.Component | React.FC)} Component React.Component | React.FC
           * @returns void
           */


          var NodeC = function NodeC(a, b) {
            this.id = a;
            this.actions = {};
            this.contract = {};
            this.Component = b;
          };
          /**
           * @param {{}} state - Object of type any
           * @returns void
           */


          NodeC.prototype.state = function (a) {
            if (_typeof(a) !== "object") {
              logger(logType.err, logMap.ITSRO(this.id));
              throw new Error();
            }

            store[this.id]["state"] = setImmutableObject(store[this.id]["state"], a);
            this.state = a || {};
          };
          /**
           * @param {string} forNode - type NODE_ID (Node with NODE_ID should exists)
           * @param {string} actionName - type ACTIONS_ID, UPPERCASE string
           * @param {{}} newState - Object of type Node.state
           * @returns void
           */


          NodeC.prototype.useContract = function (a, b, c) {
            if (isDev) {
              // if Node already exists with the name
              if (Object.prototype.hasOwnProperty.call(store, a)) {
                logger(logType.err, logMap.ITNI(this.id, a));
                throw new Error();
              }

              if (typeof b !== "string") {
                logger(logType.err, logMap.ITANRS(this.id, b));
                throw new Error();
              }

              if (!(_typeof(c) === "object" || typeof c === "function")) {
                logger(logType.err, logMap.ITSROOF(this.id, b));
                throw new Error();
              }
            }

            if (_typeof(c) === "object") {
              var d = {};

              d[b] = function () {
                now("$" + b);
                store["#" + a]["state"] = setImmutableObject(store["#" + a]["state"], c);
                requestUpdate("#" + a);
              };

              store[this.id]["contract"] = setImmutableArray(store[this.id]["contract"], [b]);
              this.contract = setImmutableObject(this.contract, d);
            } else {
              this.useContractCallback(a, b, c);
            }
          };
          /**
           * @param {string} actionName - type ACTIONS_ID, UPPERCASE string
           * @param {{}} newState - Object of type Node.state
           * @returns void
           */


          NodeC.prototype.useAction = function (a, b) {
            var c = this;

            if (isDev) {
              if (typeof a !== "string") {
                logger(logType.err, logMap.ITANRS(this.id, a));
                throw new Error();
              }

              if (!(_typeof(b) === "object" || typeof b === "function")) {
                logger(logType.err, logMap.ITSROOF(this.id, a));
                throw new Error();
              }
            }

            if (_typeof(b) === "object") {
              var d = {};

              d[a] = function () {
                now("$" + a);
                store[c.id]["state"] = setImmutableObject(store[c.id]["state"], b);
                requestUpdate(c.id);
              };

              store[this.id]["actions"] = setImmutableArray(store[this.id]["actions"], [a]);
              this.actions = setImmutableObject(this.actions, d);
            } else if (typeof b === "function") {
              this.useActionCallback(a, b);
            }
          };
          /**
           * @param {string} actionName - type ACTIONS_ID, UPPERCASE string
           * @param {function} func - function returns Object of type Node.state
           * @returns void
           */


          NodeC.prototype.useActionCallback = function (a, b) {
            var c = this;

            if (isDev) {
              if (typeof a !== "string") {
                logger(logType.err, logMap.ITANRS(this.id, a));
                throw new Error();
              }

              if (typeof b !== "function") {
                logger(logType.err, logMap.ITCRF(this.id, a));
                throw new Error();
              }
            }

            var d = {};
            d[a] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function d() {
              var e,
                f,
                g,
                h,
                i,
                j = arguments;
              return regeneratorRuntime.wrap(function d(k) {
                while (1) {
                  switch (k.prev = k.next) {
                    case 0:
                      now("$" + a);
                      e = store[c.id]["state"];

                      for (f = j.length, g = new Array(f), h = 0; h < f; h++) {
                        g[h] = j[h];
                      }

                      k.next = 5;
                      return b(e, g);

                    case 5:
                      i = k.sent;
                      store[c.id]["state"] = setImmutableObject(e, i);
                      requestUpdate(c.id);

                    case 8:
                    case "end":
                      return k.stop();
                  }
                }
              }, d);
            }));
            store[this.id]["actions"] = setImmutableArray(store[this.id]["actions"], [a]);
            this.actions = setImmutableObject(this.actions, d);
          };
          /**
           * @param {string} forNode - type NODE_ID (Node with NODE_ID should exists)
           * @param {string} actionName - type ACTIONS_ID, UPPERCASE string
           * @param {function} func - function returns Object of type Node.state
           * @returns void
           */


          NodeC.prototype.useContractCallback = function (a, b, c) {
            if (isDev) {
              if (Object.prototype.hasOwnProperty.call(store, a)) {
                logger(logType.err, logMap.ITNI(this.id, a));
                throw new Error();
              }

              if (typeof b !== "string") {
                logger(logType.err, logMap.ITANRS(this.id, b));
                throw new Error();
              }

              if (typeof c !== "function") {
                logger(logType.err, logMap.ITCRF(this.id, b));
                throw new Error();
              }
            }

            var d = {};
            d[b] = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function d() {
              var e,
                f,
                g,
                h,
                i,
                j = arguments;
              return regeneratorRuntime.wrap(function d(k) {
                while (1) {
                  switch (k.prev = k.next) {
                    case 0:
                      now("$" + b);
                      e = store["#" + a]["state"];

                      for (f = j.length, g = new Array(f), h = 0; h < f; h++) {
                        g[h] = j[h];
                      }

                      k.next = 5;
                      return c(e, g);

                    case 5:
                      i = k.sent;
                      store["#" + a]["state"] = setImmutableObject(e, i);
                      requestUpdate("#" + a);

                    case 8:
                    case "end":
                      return k.stop();
                  }
                }
              }, d);
            }));
            store[this.id]["contract"] = setImmutableArray(store[this.id]["contract"], [b]);
            this.actions = setImmutableObject(this.actions, d);
          };
          /**
           * To view all the Nodes defined in the Application at any point of time
           *
           * ```js
           *      const allNodes = addProfile({ sessionId: "9694dca333f01433ecb179d32251c946" });
           * ```
           * @param {typeObject} state
           * @returns {bus} void
           *
           */


          NodeC.prototype.setProfile = function (a) {
            bus = setImmutableObject(bus, a);
          };
          /**
           * You can create a Node with a createNode hook which Rootz provides.
           * The createNode hook accepts a unique Id NODE_ID of type string and a Component (Functional or Class).
           * In return it provides an array of 2, first an Object **node** while the later being a HOF (*High Order Function*) **dispatchNode**.
           * > **Note**: The node object has few helper methods for creating Actions and Contract (*discussed in later examples*).
           * It holds Id, Component, State and other details of the Node.
           * Calling the dispatchNode function returns a Component (*Which basically is the passed Component with additional features*).
           *
           * ```js
           *      const [node, dispatchNode] = createNode("NodeA", ({
           *              props,
           *              state,
           *              actions,
           *              profile,
           *      }) => {
           *	        return (
           *                      {YOUR JSX ELEMENTS GOES HERE}
           *              )
           *      });
           *
           *      export const NodeA = dispatchNode(node);
           * ```
           * > ***Tips***: *Keeping the name of NODE_ID and Component same helps in better Identification.*
           * @param {string} id
           * @param {(React.Component | React.FC)} Component
           * @returns {[NodeC, dispatchNode]} [Rootz.NodeInstance, Rootz.dispatchNode]
           *
           */


          var createNode = function createNode(a, b) {
            // if less / more arguments passed
            if (isDev && arguments.length != 2) {
              logger(logType.err, logMap.INOA(a));
              throw new Error();
            }

            var c = "#" + a; // if Node already exists with the name

            if (Object.prototype.hasOwnProperty.call(store, c)) {
              logger(logType.err, logMap.DENI(a));
              throw new Error();
            }

            var d = new NodeC(c, b);
            store[c] = {
              actions: [],
              contract: [],
              state: {},
              scope: {}
            }; // declare store variables

            return [d, dispatchNode];
          };

          exports.createNode = createNode;

          /***/
}),

/***/ 703:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */



          var ReactPropTypesSecret = __webpack_require__(414);

          function emptyFunction() { }
          function emptyFunctionWithReset() { }
          emptyFunctionWithReset.resetWarningCache = emptyFunction;

          module.exports = function () {
            function shim(props, propName, componentName, location, propFullName, secret) {
              if (secret === ReactPropTypesSecret) {
                // It is still safe when called from React.
                return;
              }
              var err = new Error(
                'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use PropTypes.checkPropTypes() to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
              );
              err.name = 'Invariant Violation';
              throw err;
            };
            shim.isRequired = shim;
            function getShim() {
              return shim;
            };
            // Important!
            // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
            var ReactPropTypes = {
              array: shim,
              bool: shim,
              func: shim,
              number: shim,
              object: shim,
              string: shim,
              symbol: shim,

              any: shim,
              arrayOf: getShim,
              element: shim,
              elementType: shim,
              instanceOf: getShim,
              node: shim,
              objectOf: getShim,
              oneOf: getShim,
              oneOfType: getShim,
              shape: getShim,
              exact: getShim,

              checkPropTypes: emptyFunctionWithReset,
              resetWarningCache: emptyFunction
            };

            ReactPropTypes.PropTypes = ReactPropTypes;

            return ReactPropTypes;
          };


          /***/
}),

/***/ 697:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */

          if (false) { var throwOnDirectAccess, ReactIs; } else {
            // By explicitly using `prop-types` you are opting into new production behavior.
            // http://fb.me/prop-types-in-prod
            module.exports = __webpack_require__(703)();
          }


          /***/
}),

/***/ 414:
/***/ ((module) => {

          "use strict";
          /**
           * Copyright (c) 2013-present, Facebook, Inc.
           *
           * This source code is licensed under the MIT license found in the
           * LICENSE file in the root directory of this source tree.
           */



          var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

          module.exports = ReactPropTypesSecret;


          /***/
}),

/***/ 113:
/***/ ((module) => {

          "use strict";
          module.exports = __WEBPACK_EXTERNAL_MODULE__113__;

          /***/
})

      /******/
});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if (__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
        /******/
}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
        /******/
};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
      /******/
}
/******/
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(403);
    /******/
})()
    ;
});