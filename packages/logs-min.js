/** @license RootzJs v2.0.7
 ** @author Trishanth Naidu
 ** @github https://github.com/rootzjs/core v2.0.7
 * react-jsx-dev-runtime.development.js
 * Copyright 2019 Trishanth Naidu
 * Copyright (c) Rootz Js,and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
"use strict"; Object.defineProperty(exports, "__esModule", { value: !0 }), exports.logger = exports.logMap = exports.logType = void 0; const logType = { inf: "info", bra: "brand", err: "error", war: "warning" }; exports.logType = logType; const consoleColorCode = { error: { brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #f44336;" }, warning: { brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #f48e36;" }, information: { brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #38b9f4;" }, branding: { brand: "color: #fff; font-size:12px;  border-radius: 3px; padding: 2px 7px 2px 7px; text-align: center; background-color: #677b8c;" } }, logMap = { NODE_WITHOUT_COMPONENT: o => `%cRootz Error: Node ${o} should have a defined Component`, NODE_INTERFACE_LENGTH: o => `%cRootz Error: Node constructor ${o} requires exactly 2 argument 'id' of type string and 'Component' of type React Component`, NODE_NAME_ALREADY_EXISTS: o => `%cRootz Error: In '${o}', Duplicate entry found, Node Name already exists`, LEAF_NAME_ALREADY_EXISTS: o => `%cRootz Error: In '${o}', Duplicate entry found, Leaf Name already exists`, ACTIONS_ARE_NOT_FUNCTION: o => `%cRootz Error: In '${o}', Invalid type Actions, Actions should be of type function`, INVALID_CONTRACT_TYPE: o => `%cRootz Error: In '${o}', Contract should be a function, create a contract by 'node.defineContract' method only`, CONTRACTS_ARE_NOT_FUNCTION: o => `%cRootz Error: In '${o}', Invalid type Actions in Contract, Actions passed in Contract should be of type function`, INVALID_TYPE_IN_CREATE_ACTION_REQUIRED_STRING: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createAction for '${r}', required String`, INVALID_TYPE_IN_CREATE_ACTION_REQUIRED_OBJECT: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createAction for '${r}', required Object`, INVALID_TYPE_IN_CREATE_ACTION_REQUIRED_OBJECT_OR_FUNCTION: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createAction for '${r}', required Object or a Function`, INVALID_TYPE_IN_CREATE_CONTRACT_REQUIRED_OBJECT_OR_FUNCTION: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createContract for '${r}', required Object or a Function`, INVALID_TYPE_IN_CREATE_CONTRACT_REQUIRED_STRING: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createContract for '${r}', required String`, INVALID_TYPE_IN_CREATE_CONTRACT_REQUIRED_OBJECT: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createContract for '${r}', required Object`, INVALID_TYPE_IN_CREATEACTIONMETHODS_REQUIRED_STRING: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createActionCallback '${r}', required String.`, INVALID_TYPE_IN_CREATECONTRACTMETHODS_REQUIRED_STRING: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createContractCallback '${r}', required String.`, INVAID_TYPE_NODE_ID_IN_CONTRACT: (o, r) => `%cRootz Error: In ${o}, Node name passed in createContract for '${r}' does not exist, please check if it is defined`, INVAID_TYPE_NODE_ID_IN_CONTRACT_CALLBACK: (o, r) => `%cRootz Error: In ${o}, Node name passed in createContractCallback for '${r}' does not exist, please check if it is defined`, INVALID_TYPE_IN_CREATEACTIONMETHODS_REQUIRED_FUNCTION: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in createActionCallback '${r}', required function.`, INVALID_TYPE_IN_DEFINE_STATE_REQUIRED_OBJECT: (o, r) => `%cRootz Error: In '${o}', Invalid type arguments in defineState '${r}', required Object. States are of type Object only.` }; exports.logMap = logMap; const logger = (o, r) => { switch (o) { case logType.err: console.log(r, consoleColorCode.error.brand); case logType.war: console.log(r, consoleColorCode.warning.brand); case logType.inf: console.log(r, consoleColorCode.information.brand); case logType.bra: console.log(r, consoleColorCode.branding.brand); default: console.log(r, consoleColorCode.information.brand) } }; exports.logger = logger;